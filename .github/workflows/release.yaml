name: Python Release
on:
  push:
    tags:
      - v*

env:
  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN_DIST }}
  DIST_DIR: ${{ github.sha }}

jobs:
  lock_exists:
    runs-on: ubuntu-latest
    name: Cargo.lock
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Generate Cargo.lock if missing
        run: |
          if [ ! -f Cargo.lock ]; then
            cargo generate-lockfile
          else
            echo "Cargo.lock already exists"
          fi
        working-directory: ./bindings/python
      
      - name: Cargo.lock exists 
        run: cat Cargo.lock
        working-directory: ./bindings/python

  build:
    name: build on ${{ matrix.platform || matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    needs: [lock_exists]
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos]
        target: [x86_64, aarch64]
        include:
          - os: ubuntu
            platform: linux
            target: x86_64
            manylinux: manylinux_2_28

          - os: ubuntu
            platform: linux
            target: aarch64
            manylinux: manylinux_2_28

          - os: macos
            platform: macos
            target: aarch64
            interpreter: 3.9 3.10 3.11 3.12 pypy3.9 pypy3.10

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - run: pip install -U twine

      # - name: Download ONNX Runtime library
      #   run: |
      #     set -e

      #     ORT_VERSION=1.20.1

      #     # Map OS and architecture to ONNX Runtime artifact names
      #     if [[ "${{ matrix.os }}" == "ubuntu" ]]; then
      #       PLATFORM="linux"
      #       EXT="tgz"
      #       LIBNAME="libonnxruntime.so"

      #       if [[ "${{ matrix.target }}" == "x86_64" ]]; then
      #         ARCH="x64"
      #       elif [[ "${{ matrix.target }}" == "aarch64" ]]; then
      #         ARCH="aarch64"
      #       else
      #         echo "Unsupported architecture: ${{ matrix.target }}"
      #         exit 1
      #       fi

      #     elif [[ "${{ matrix.os }}" == "macos" ]]; then
      #       PLATFORM="osx"
      #       EXT="tgz"
      #       LIBNAME="libonnxruntime.dylib"

      #       if [[ "${{ matrix.target }}" == "x86_64" ]]; then
      #         ARCH="x86_64"
      #       elif [[ "${{ matrix.target }}" == "aarch64" ]]; then
      #         ARCH="arm64"
      #       else
      #         echo "Unsupported architecture: ${{ matrix.target }}"
      #         exit 1
      #       fi
      #     else
      #       echo "Unsupported OS: ${{ matrix.os }}"
      #       exit 1
      #     fi

      #     ORT_FILENAME="onnxruntime-${PLATFORM}-${ARCH}-${ORT_VERSION}.${EXT}"
      #     ORT_URL="https://github.com/microsoft/onnxruntime/releases/download/v${ORT_VERSION}/${ORT_FILENAME}"
          
      #     echo "Downloading ONNX Runtime from: $ORT_URL"
      #     curl -sSL "$ORT_URL" -o ort.tgz

      #     echo "Extracting ONNX Runtime..."
      #     mkdir -p ort
      #     tar -xzf ort.tgz -C ort --strip-components=1

      #     echo "ORT_LIB_LOCATION=$GITHUB_WORKSPACE/ort/lib" >> $GITHUB_ENV
      #     echo "ORT_LIB_PROFILE=release" >> $GITHUB_ENV
      
      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          working-directory: ./bindings/python
          manylinux: ${{ matrix.manylinux }}
          container: ${{ matrix.container }}
          args: --release --out dist --interpreter ${{ matrix.interpreter || '3.9 3.10 3.11 3.12 pypy3.9 pypy3.10' }} ${{ matrix.extra-build-args }}
          rust-toolchain: stable
          docker-options: -e CI # -e ORT_LIB_LOCATION -e ORT_LIB_PROFILE
        # env:
        #   ORT_LIB_LOCATION: ${{ env.ORT_LIB_LOCATION }}
        #   ORT_LIB_PROFILE: ${{ env.ORT_LIB_PROFILE }}

      - run: ${{ matrix.ls || 'ls -lh' }} dist/
        working-directory: ./bindings/python

      - run: twine check --strict dist/*
        working-directory: ./bindings/python

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files-${{ matrix.os }}-${{ matrix.target }}-${{ matrix.manylinux }}
          path: ./bindings/python/dist
  
  build-sdist:
    name: build sdist
    needs: [lock_exists]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: PyO3/maturin-action@v1
        with:
          working-directory: ./bindings/python
          command: sdist
          args: --out dist
          rust-toolchain: stable
      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files-srt
          path: ./bindings/python/dist


  upload_package:
    name: Upload package to PyPi
    runs-on: ubuntu-latest
    needs: [build, build-sdist]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: x64

      - uses: actions/download-artifact@v4
        with:
          path: ./bindings/python/dist
          merge-multiple: true
        
      - name: Upload to PyPi
        working-directory: ./bindings/python
        run: |
          pip install twine
          twine upload dist/* -u __token__ -p "$PYPI_TOKEN"